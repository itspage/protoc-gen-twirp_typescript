// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drawer/glitter.proto

package drawer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Glitter struct {
	IsGel                bool     `protobuf:"varint,1,opt,name=is_gel,json=isGel,proto3" json:"is_gel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Glitter) Reset()         { *m = Glitter{} }
func (m *Glitter) String() string { return proto.CompactTextString(m) }
func (*Glitter) ProtoMessage()    {}
func (*Glitter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c464522d091f1bf, []int{0}
}

func (m *Glitter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Glitter.Unmarshal(m, b)
}
func (m *Glitter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Glitter.Marshal(b, m, deterministic)
}
func (m *Glitter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Glitter.Merge(m, src)
}
func (m *Glitter) XXX_Size() int {
	return xxx_messageInfo_Glitter.Size(m)
}
func (m *Glitter) XXX_DiscardUnknown() {
	xxx_messageInfo_Glitter.DiscardUnknown(m)
}

var xxx_messageInfo_Glitter proto.InternalMessageInfo

func (m *Glitter) GetIsGel() bool {
	if m != nil {
		return m.IsGel
	}
	return false
}

func init() {
	proto.RegisterType((*Glitter)(nil), "drawer.Glitter")
}

func init() { proto.RegisterFile("drawer/glitter.proto", fileDescriptor_6c464522d091f1bf) }

var fileDescriptor_6c464522d091f1bf = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x29, 0x4a, 0x2c,
	0x4f, 0x2d, 0xd2, 0x4f, 0xcf, 0xc9, 0x2c, 0x29, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x83, 0x88, 0x2a, 0x29, 0x70, 0xb1, 0xbb, 0x43, 0x24, 0x84, 0x44, 0xb9, 0xd8, 0x32,
	0x8b, 0xe3, 0xd3, 0x53, 0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x82, 0x58, 0x33, 0x8b, 0xdd,
	0x53, 0x73, 0x9c, 0x9c, 0xa3, 0x1c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73,
	0xf5, 0x8b, 0x13, 0x33, 0x73, 0x72, 0x53, 0x4b, 0x8a, 0x32, 0x2b, 0xf4, 0xc1, 0x06, 0x25, 0xeb,
	0xa6, 0xa7, 0xe6, 0xe9, 0x96, 0x94, 0x67, 0x16, 0x15, 0xc4, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27,
	0x17, 0x65, 0x16, 0x94, 0x40, 0xe4, 0x92, 0x4a, 0xd3, 0xf4, 0x21, 0xd6, 0x24, 0xb1, 0x81, 0x05,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33, 0x21, 0x41, 0xdf, 0x8d, 0x00, 0x00, 0x00,
}
